## IAM – Identity and Access Management 

- Grouping users based on what functions they perform (eg – Developers, OPerations team, etc) 
- Works on principle of "least privilege" 
- Users or user groups can be assigned JSON documents called policies – these policies define permissions of users 
- IAM is a global service. 
 

### Policies Structure (important bits): 
Statements consists of  
- Sid – identifier for the statement 
- Effect – whether the statement allows or denies access 
- Principal – account/user/role that the policy applies to  
- Action – list of actions the policy allows or denies 
- Resource list – list of resources that the actions applies to 
- Condition – conditions under which this policy is in effect 

 
### Password policies: 
- You can set min password length, etc on the Password Policy section 

### User Access:
1. Management console
2. Command Line interface - setup on your local terminal, protected by access keys
3. AWS SDK - to call APIs from AWS on your app, protected by access keys

- Keys generated on AWS console

### IAM roles for services
- AWS will need to perform actions on your behalf so they need roles too
- Roles: permissions to perform actions

### IAM Security tools
IAM credentials report - account level - auditing account permissions 
IAM access advisor - user level

Always create roles for giving permissions to AWS services
